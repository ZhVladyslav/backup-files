// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0--rc2
// source: crypto.proto

package crypto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Crypto_GetHash_FullMethodName = "/review.Crypto/GetHash"
	Crypto_Stop_FullMethodName    = "/review.Crypto/Stop"
)

// CryptoClient is the client API for Crypto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoClient interface {
	GetHash(ctx context.Context, in *GetHashReq, opts ...grpc.CallOption) (*GetHashRes, error)
	Stop(ctx context.Context, in *StopReq, opts ...grpc.CallOption) (*StopRes, error)
}

type cryptoClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoClient(cc grpc.ClientConnInterface) CryptoClient {
	return &cryptoClient{cc}
}

func (c *cryptoClient) GetHash(ctx context.Context, in *GetHashReq, opts ...grpc.CallOption) (*GetHashRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHashRes)
	err := c.cc.Invoke(ctx, Crypto_GetHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) Stop(ctx context.Context, in *StopReq, opts ...grpc.CallOption) (*StopRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopRes)
	err := c.cc.Invoke(ctx, Crypto_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoServer is the server API for Crypto service.
// All implementations must embed UnimplementedCryptoServer
// for forward compatibility.
type CryptoServer interface {
	GetHash(context.Context, *GetHashReq) (*GetHashRes, error)
	Stop(context.Context, *StopReq) (*StopRes, error)
	mustEmbedUnimplementedCryptoServer()
}

// UnimplementedCryptoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCryptoServer struct{}

func (UnimplementedCryptoServer) GetHash(context.Context, *GetHashReq) (*GetHashRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHash not implemented")
}
func (UnimplementedCryptoServer) Stop(context.Context, *StopReq) (*StopRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedCryptoServer) mustEmbedUnimplementedCryptoServer() {}
func (UnimplementedCryptoServer) testEmbeddedByValue()                {}

// UnsafeCryptoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoServer will
// result in compilation errors.
type UnsafeCryptoServer interface {
	mustEmbedUnimplementedCryptoServer()
}

func RegisterCryptoServer(s grpc.ServiceRegistrar, srv CryptoServer) {
	// If the following call pancis, it indicates UnimplementedCryptoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Crypto_ServiceDesc, srv)
}

func _Crypto_GetHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).GetHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crypto_GetHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).GetHash(ctx, req.(*GetHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crypto_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).Stop(ctx, req.(*StopReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Crypto_ServiceDesc is the grpc.ServiceDesc for Crypto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crypto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "review.Crypto",
	HandlerType: (*CryptoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHash",
			Handler:    _Crypto_GetHash_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Crypto_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crypto.proto",
}
